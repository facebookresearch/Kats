(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7354],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],c={id:"compose_api",title:"Compose API",sidebar_label:"Experimental compose API"},p={unversionedId:"advanced/compose_api",id:"version-0.11/advanced/compose_api",isDocsHomePage:!1,title:"Compose API",description:"Hydra 0.11.0 introduces a new experimental API for composing configuration via the hydra.experimental.compose() function.",source:"@site/versioned_docs/version-0.11/advanced/hydra_compose.md",sourceDirName:"advanced",slug:"/advanced/compose_api",permalink:"/docs/0.11/advanced/compose_api",editUrl:"https://github.com/facebookresearch/kats/edit/master/website/versioned_docs/version-0.11/advanced/hydra_compose.md",version:"0.11",lastUpdatedBy:"Ben Wallace",lastUpdatedAt:1603939002,formattedLastUpdatedAt:"10/28/2020",sidebar_label:"Experimental compose API",frontMatter:{id:"compose_api",title:"Compose API",sidebar_label:"Experimental compose API"},sidebar:"version-0.11/docs",previous:{title:"Hydra plugins",permalink:"/docs/0.11/advanced/plugins"},next:{title:"Ray example",permalink:"/docs/0.11/advanced/ray_example"}},l=[{value:"<code>hydra.experimental.compose()</code> example",id:"hydraexperimentalcompose-example",children:[]},{value:"API Documentation",id:"api-documentation",children:[]}],s={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Hydra 0.11.0 introduces a new experimental API for composing configuration via the ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra.experimental.compose()")," function.\nPrior to calling compose(), you have to initialize Hydra: This can be done by using the standard ",(0,a.kt)("inlineCode",{parentName:"p"},"@hydra.main()")," or by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra.experimental.initialize()"),"."),(0,a.kt)("p",null,"Here is an ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/hydra/tree/0.11_branch/examples/notebook"},"example Jupyter notebook utilizing this API"),"."),(0,a.kt)("h3",{id:"hydraexperimentalcompose-example"},(0,a.kt)("inlineCode",{parentName:"h3"},"hydra.experimental.compose()")," example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.experimental import compose, initialize\n\n\nif __name__ == "__main__":\n    initialize(\n        config_dir="conf", strict=True,\n    )\n\n    cfg = compose("config.yaml", overrides=["db=mysql", "db.user=me"])\n    print(OmegaConf.to_yaml(cfg))\n')),(0,a.kt)("h3",{id:"api-documentation"},"API Documentation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def compose(config_file=None, overrides=[], strict=None):\n    """\n    :param config_file: optional config file to load\n    :param overrides: list of overrides for config file\n    :param strict: optionally override the default strict mode\n    :return: the composed config\n    """\n\n\ndef initialize(config_dir=None, strict=None, caller_stack_depth=1):\n    """\n    Initializes the Hydra sub system\n\n    :param config_dir: config directory relative to the calling script\n    :param strict: Default value for strict mode\n    :param caller_stack_depth:\n    :return:\n    """\n')))}d.isMDXComponent=!0}}]);